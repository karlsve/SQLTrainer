/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sqltrainer.introduction;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author karlinsv
 */
public class IntroductionScreen extends javax.swing.JFrame  {

    private ChapterListItem current;
    private File file=null;
    private String[] filenames;
    
    
    public IntroductionScreen()  {
        initComponents();
        initList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButtonBack = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jLabel1.setText("© S&M Production™");

        setTitle("Zusammenfassung");

        jLabel2.setText("© S&M Production™");

        jSplitPane1.setDividerLocation(80);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButtonBack.setText("Zurück");
        jButtonBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBackMouseClicked(evt);
            }
        });

        jButtonNext.setText("Weiter");
        jButtonNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonNextMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNext)
                        .addContainerGap())
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNext)
                    .addComponent(jButtonBack))
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel1);

        jList1.setModel(new DefaultListModel<ChapterListItem>());
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jList1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 496, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNextMouseClicked
        updateItem(current.getNext());
    }//GEN-LAST:event_jButtonNextMouseClicked

    private void jButtonBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBackMouseClicked
        updateItem(current.getLast());
    }//GEN-LAST:event_jButtonBackMouseClicked

    /**
     * @param args the command line arguments
     */
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    private void printText(ChapterListItem path) {
        this.jTextArea2.setText("");
        
        try {
            Reader reader = new InputStreamReader(new FileInputStream(path.getPath()),"UTF-8");
            BufferedReader buffer = new BufferedReader(reader);

            String text;
            

            while((text=buffer.readLine())!=null)
            {
                this.jTextArea2.append(text);
                this.jTextArea2.append("\n");
                this.jTextArea2.updateUI();
                
            }
            buffer.close();
        } catch (Exception ex) {
            Logger.getLogger(IntroductionScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    
    }
    
  private void initList(){
        try {
            listFiles(".txt");
        } catch (IOException ex) {
            Logger.getLogger(IntroductionScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
      jButtonNext.setEnabled(false);
      jButtonBack.setEnabled(false);
        jList1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList)evt.getSource();
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    ChapterListItem item = (ChapterListItem)list.getModel().getElementAt(index);
                    updateItem(item);
                } else if (evt.getClickCount() == 3) {   // Triple-click
                    int index = list.locationToIndex(evt.getPoint());

                }
            }
        });
        DefaultListModel<ChapterListItem> list = (DefaultListModel<ChapterListItem>)jList1.getModel();
        if(filenames != null) {
            ChapterListItem last = null;
            for(String filename : filenames)
            {
                ChapterListItem item = new ChapterListItem("data\\Skripte\\"+filename, filename.replaceAll("\\.txt", ""));
                if(last != null) {
                    last.setNext(item);
                    item.setLast(last);
                }
                list.addElement(item);
                last = item;    
            }
        }
    }
  

    private void updateItem(ChapterListItem item) {
        if(item!=null) {
            current = item;
            printText(item);
            if(current.getNext()!=null)
            {
                jButtonNext.setEnabled(true);
            }
            else
            {
                jButtonNext.setEnabled(false);
            }
            if(current.getLast()!=null)
            {
                jButtonBack.setEnabled(true);
            }
            else
            {
                jButtonBack.setEnabled(false);
            }
        }
    }
    
       private void listFiles(final String extension) throws IOException{
           file = new File("data\\Skripte\\");
           filenames = file.list(new FilenameFilter() {
               public boolean accept(File dir, String name){
                   return name.endsWith(extension);
               }
           });
           if(filenames != null) {
                for(int i = 0; i  < filenames.length; i++){
                    FileReader reader = new FileReader(filenames[i]);
                    char[] data = new char[10];
                    reader.read(data);
                }
           }
       }
}